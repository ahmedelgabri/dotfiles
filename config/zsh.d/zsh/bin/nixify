#!/usr/bin/env bash
set -ue -o pipefail

# Nixify the current directory

# Check for .envrc file
if [ ! -e ./.envrc ]; then
	echo "Creating default .envrc..."
	# Use printf for potentially better handling of special characters and portability
	printf '%s\n' "set -e" "set +u" "use nix" "dotenv_if_exists" >.envrc
	# Check if direnv command exists before running
	if command -v direnv &>/dev/null; then
		direnv allow
	else
		echo "Warning: direnv command not found. Please run 'direnv allow' manually."
	fi
fi

# Check for Nix configuration files
if [[ ! -e shell.nix ]] && [[ ! -e default.nix ]] && [[ ! -e flake.nix ]]; then
	echo "Creating default shell.nix..."
	# Make a default shell.nix and then pop open an editor
	cat >shell.nix <<'EOF'
with import <nixpkgs> {
	config.allowUnfree = true;
};
let
  projectPathList = builtins.split "/" (builtins.toString ./.);
  projectName = builtins.elemAt projectPathList (builtins.length projectPathList - 1);
  # Grab node version from .nvmrc file if exits otherwise fallback to latest node
  nodeVersion =
    if builtins.pathExists ./.nvmrc then
      builtins.concatStringsSep
        "_" [
        "nodejs"
        (builtins.head (builtins.splitVersion (builtins.readFile
          ./.nvmrc)))
      ] else "nodejs";

  packageManager =
    if builtins.pathExists ./yarn.lock then
      pkgs.yarn else
      if builtins.pathExists ./pnpm-lock.yaml then
        nodePackages.pnpm
      else "";
in
mkShell {
  name = projectName;
  buildInputs = with pkgs; [
    pkgs.${nodeVersion}
    packageManager
  ];
}
EOF
	# Use ${EDITOR:-vim} for safety if EDITOR is unset
	if [[ -n "$EDITOR" ]]; then
		"$EDITOR" shell.nix
	else
		vim shell.nix
	fi
else
	echo "Nix configuration file (shell.nix, default.nix, or flake.nix) already exists."
fi
