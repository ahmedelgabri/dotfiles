#!/bin/bash

# Copied from https://github.com/Goles/Battery with some edits from me check for the history https://github.com/ahmedelgabri/Battery

# # Battery

# ![image](http://i.imgur.com/mEEPD.png)

# Battery is a little bash script that uses [Spark](https://github.com/holman/spark) to display the battery status on your __tmux__ sessions or the __terminal__.

# ### Features

# * Changes color to reflect battery status (Green, Yellow, Red)
# * Displays battery percentage
# * Graph bar changes its values between 0 and 100% (thanks to spark)
# * If you don't like the default colors, you can specify the good, medium and warning battery status colors using flags (read usage).

# ### Requirements

# Right now, battery requires [Spark](https://github.com/holman/spark) to graph your battery status.
# Battery can run on both __Mac OS X__ and Linux.

# If you don't want to use Spark, you can use the `-a` flag, for ascii output:
# ![image](http://i.imgur.com/w9qtQeu.png)

# # Install - Mac

# ### Homebrew

# Just do (case sensitive)

#     brew tap Goles/battery
#     brew install battery

# ### One Liner
# (Cut & Paste on terminal to install on `/usr/bin`, btw, try to run from `~/` or other writable dir)

# 	brew install spark; curl -O https://raw.github.com/Goles/Battery/master/battery ; \
# 	sudo mv battery /usr/bin; sudo chmod 755 /usr/bin/battery

# ### Step by Step

# * Install spark (with [Homebrew](https://github.com/mxcl/homebrew) on Mac OS X)

# 	``` brew install spark```

# * Copy battery somewhere in your path & fix permissions

# 	``` sudo cp battery /usr/bin ```

# 	``` sudo chmod 755 /usr/bin/battery ```

# # Install - Linux

# Linux support is still being tested. It ought to work properly in Debian and
# Ubuntu, but is largely untested in other distributions. Using linux requires
# `upower`, which should be included, or available, on most linux distributions.

# It's recommended to install this somewhere in your path that is writable,
# like `/usr/local/bin`

# ```bash
# # if you also want to use spark
# curl -O https://raw.githubusercontent.com/holman/spark/master/spark
# mv spark /usr/local/bin
# chmod u+x /usr/local/bin/spark

# curl -O https://raw.githubusercontent.com/goles/battery/master/battery
# mv battery /usr/local/bin
# chmod u+x /usr/local/bin/battery
# ```
# __NOTE:__ This `spark` is *not* the same `spark` that you would install by doing

# ```bash
# $ sudo aptitude install spark
# ```
# That is [Apache Spark](http://spark.apache.org), which is a general engine for
# large-scale data processing.

# # Usage

# ### Terminal

# * Run Battery (From the terminal)

# 	``` battery ```
# ###### You should see something like this:
# ![image](http://i.imgur.com/SLSBg.png)

# ### tmux

# * Be sure to make tmux display utf-8 characters by running it with the `-u` flag

# 	```tmux -u```

# * Add the following line to your `~/.tmux.conf` file

# 	``` set -g status-right "#(/usr/bin/battery -t)"```

# * reload the tmux config by running `tmux source-file ~/.tmux.conf`.

# ###### You should now see something like this at the bottom right corner:
# ![image](http://i.imgur.com/Eaajb.png)

# # Flags

# The flag `-b` will set a different battery path, the default value is `/sys/class/power_supply/BAT0`. You can specify the colors for __good__ battery level, __middle__ battery level, and __warning__ battery level with the flags ``` -g -m -w ```.
# __Note:__ You should use color names for when in tmux mode and [ascii colors](http://www.termsys.demon.co.uk/vtansi.htm#colors) in terminal mode.
# In Mac OS, you can specify to use pmset with the `-p` flag; without it, the program uses `ioreg`. In Linux, this flag is ignored, and always uses `upower`.

# Battery displays an emoji by default. You can disable this behaviour by passing the `-e` flag.

# The flag `-z` will add zsh escape characters to the output of the script.

usage() {
  cat <<EOF
battery usage:
  general:
    -h, --help    print this message
    -t            output tmux status bar format
    -z            output zsh prompt format
    -c            replace the battery charging icon
    -i            enable nerd fonts battery indicators
    -G            show the graph
    -a            output ascii instead of spark
    -b            battery path            default: /sys/class/power_supply/BAT0
    -p            use pmset (more accurate)
  colors:                                                 tmux     zsh
    -g <color>    good battery level      default: 1;32 | green  | 64
    -m <color>    middle battery level    default: 1;33 | yellow | 136
    -w <color>    warn battery level      default: 0;31 | red    | 160
EOF
}

if [[ $1 == '-h' || $1 == '--help' || $1 == '-?' ]]; then
  usage
  exit 0
fi

# For default behavior
setDefaults() {
  pmset_on=0
  output_tmux=0
  output_zsh=0
  show_graph=0
  show_battery_icon=0
  charge_icon='ϟ'
  ascii=0
  ascii_bar='=========='
  good_color="1;32"
  middle_color="1;33"
  warn_color="0;31"
  connected=0
  battery_path=/sys/class/power_supply/BAT0
}

setDefaults

# Determine battery charge state
battery_charge() {
  case $(uname -s) in
  "Darwin")
    if ((pmset_on)) && command -v pmset &>/dev/null; then
      if [ "$(pmset -g batt | grep -o 'AC Power')" ]; then
        BATT_CONNECTED=1
      else
        BATT_CONNECTED=0
      fi
      BATT_PCT=$(pmset -g batt | grep -o '[0-9]*%' | tr -d %)
    else
      while read key value; do
        case $key in
        "MaxCapacity")
          maxcap=$value
          ;;
        "CurrentCapacity")
          curcap=$value
          ;;
        "ExternalConnected")
          if [ $value == "No" ]; then
            BATT_CONNECTED=0
          else
            BATT_CONNECTED=1
          fi
          ;;
        esac
        if [[ -n "$maxcap" && -n $curcap ]]; then
          BATT_PCT=$((100 * curcap / maxcap))
        fi
      done < <(ioreg -n AppleSmartBattery -r | grep -o '"[^"]*" = [^ ]*' | sed -e 's/= //g' -e 's/"//g' | sort)
    fi
    ;;
  "Linux")
    case $(cat /etc/*-release) in
    *"Arch Linux"* | *"Ubuntu"*)
      battery_state=$(cat $battery_path/energy_now)
      battery_full=$battery_path/energy_full
      battery_current=$battery_path/energy_now
      ;;
    *)
      battery_state=$(cat $battery_path/status)
      battery_full=$battery_path/charge_full
      battery_current=$battery_path/charge_now
      ;;
    esac
    if [ $battery_state == 'Discharging' ]; then
      BATT_CONNECTED=0
    else
      BATT_CONNECTED=1
    fi
    now=$(cat $battery_current)
    full=$(cat $battery_full)
    BATT_PCT=$((100 * $now / $full))
    ;;
  esac
}

# Apply the correct color to the battery status prompt
apply_colors() {
  # Green
  if [[ $BATT_PCT -ge 75 ]]; then
    if ((output_tmux)); then
      COLOR="#[fg=$good_color]"
    elif ((output_zsh)); then
      COLOR="%F{$good_color}"
    else
      COLOR=$good_color
    fi

  # Yellow
  elif [[ $BATT_PCT -ge 25 ]] && [[ $BATT_PCT -lt 75 ]]; then
    if ((output_tmux)); then
      COLOR="#[fg=$middle_color]"
    elif ((output_zsh)); then
      COLOR="%F{$middle_color}"
    else
      COLOR=$middle_color
    fi

  # Red
  elif [[ $BATT_PCT -lt 25 ]]; then
    if ((output_tmux)); then
      COLOR="#[fg=$warn_color]"
    elif ((output_zsh)); then
      COLOR="%F{$warn_color}"
    else
      COLOR=$warn_color
    fi
  fi
}

# Apply the correct icon to the battery status prompt
apply_battery_icon() {
  if ((BATT_CONNECTED)); then
    GRAPH=${charge_icon}
  else
    # Full
    if [[ $BATT_PCT -ge 95 ]]; then
      GRAPH=" "

    # NEARL-FULL
    elif [[ $BATT_PCT -ge 75 ]] && [[ $BATT_PCT -lt 95 ]]; then
      GRAPH=" "

    # HALF-FULL
    elif [[ $BATT_PCT -ge 25 ]] && [[ $BATT_PCT -lt 75 ]]; then
      GRAPH=" "

    # NEARLY EMPTY
    elif [[ $BATT_PCT -lt 25 ]]; then
      GRAPH=" "
    fi
  fi
}

# Print the battery status
print_status() {
  if ((show_battery_icon)); then
    apply_battery_icon
  else
    if ((BATT_CONNECTED)); then
      GRAPH=${charge_icon}
    else
      if ((show_graph)); then
        if command -v spark &>/dev/null; then
          sparks=$(spark 0 ${BATT_PCT} 100)
          GRAPH=${sparks:1:1}
        else
          ascii=1
        fi
      fi

      if ((ascii)); then
        barlength=${#ascii_bar}

        # Battery percentage rounded to the length of ascii_bar
        rounded_n=$(($barlength * $BATT_PCT / 100 + 1))

        # Creates the bar
        GRAPH=$(printf "[%-${barlength}s]" "${ascii_bar:0:rounded_n}")
      fi
    fi
  fi

  if ((output_tmux)); then
    printf "%s%s %s%s" "$COLOR" "$BATT_PCT%" "$GRAPH" "#[default]"
  elif ((output_zsh)); then
    printf "%%B%s%s %s" "$COLOR" "$BATT_PCT%" "$GRAPH"
  else
    printf "\e[0;%sm%s %s \e[m\n" "$COLOR" "$BATT_PCT%" "$GRAPH"
  fi
}

# Read args
while getopts ":g:m:w:c:tizGab:p" opt; do
  case $opt in
  g)
    good_color=$OPTARG
    ;;
  m)
    middle_color=$OPTARG
    ;;
  w)
    echo "$OPTARG"
    warn_color=$OPTARG
    ;;
  c)
    charge_icon=$OPTARG
    ;;
  i)
    show_battery_icon=1
    ;;
  t)
    output_tmux=1
    good_color="colour237"
    middle_color="colour243"
    warn_color="red"
    ;;
  z)
    output_zsh=1
    good_color="64"
    middle_color="136"
    warn_color="160"
    ;;
  G)
    show_graph=1
    ;;
  a)
    ascii=1
    ;;
  p)
    pmset_on=1
    ;;
  b)
    if [ -d $OPTARG ]; then
      battery_path=$OPTARG
    else
      echo >&2 "Battery not found, trying to use default path..."
      if [ ! -d $battery_path ]; then
        echo >&2 "Default battery path is also unreachable"
        exit 1
      fi
    fi
    ;;
  \?)
    echo "Invalid option: -$OPTARG"
    exit 1
    ;;
  :)
    echo "Option -$OPTARG requires an argument"
    exit 1
    ;;
  esac
done

battery_charge
apply_colors
print_status
