# vim:ft=zsh:

# Nixify the current directory

emulate -L zsh

unalias nixify 2>/dev/null

nixify() {
  if [ ! -e ./.envrc ]; then
    echo "set -e\nset +u\nuse nix\ndotenv_if_exists" > .envrc
    direnv allow
  fi

  if [[ ! -e shell.nix ]] && [[ ! -e default.nix ]] && [[ ! -e flakes.nix ]]; then
    # Make a default shell.nix and then pop open an editor
    cat > shell.nix <<'EOF'
with import <nixpkgs> {
	config.allowUnfree = true;
};
let
  projectPathList = builtins.split "/" (builtins.toString ./.);
  projectName = builtins.elemAt projectPathList (builtins.length projectPathList - 1);
  # Grab node version from .nvmrc file if exits otherwise fallback to latest node
  nodeVersion =
    if builtins.pathExists ./.nvmrc then
      builtins.concatStringsSep
        "_" [
        "nodejs"
        (builtins.head (builtins.splitVersion (builtins.readFile
          ./.nvmrc)))
      ] else "nodejs";

  packageManager =
    if builtins.pathExists ./yarn.lock then
      pkgs.yarn else
      if builtins.pathExists ./pnpm-lock.yaml then
        nodePackages.pnpm
      else "";
in
mkShell {
  name = projectName;
  buildInputs = with pkgs; [
    pkgs.${nodeVersion}
    packageManager
  ];
}
EOF
$EDITOR shell.nix
  fi
}

nixify "$@"
