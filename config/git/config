# vim:noexpandtab:ft=gitconfig

[commit]
	verbose = true
	gpgsign = true

[init]
	# requires Git 2.28 or later
	defaultBranch = main

[core]
	editor = $EDITOR
	commitGraph = true
	whitespace=fix,space-before-tab,tab-in-indent,trailing-space,cr-at-eol
	; https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true
	; hash (#) conflicts with Markdown when I use hb to open PRs etc...
	commentChar = %
	hooksPath = ~/.config/git/hooks
	pager = delta_

[interactive]
	diffFilter = delta_ --color-only --features=interactive

[delta]
	syntax-theme = none
	navigate = true # use n and N to move between diff sections
	hyperlinks = true
	file-modified-label = MODIFIED:
	file-removed-label  = REMOVED:
	file-added-label    = ADDED:
	file-renamed-label  = RENAMED:
	features = labels decorations

[delta "decorations"]
	whitespace-error-style = 22 reverse
	zero-style = 8
	commit-decoration-style = bold yellow box
	hunk-header-style = 8
	hunk-header-decoration-style = black box
	file-style = yellow italic
	file-decoration-style = none
	minus-style = strike 088
	minus-emph-style = 001 052
	plus-style = italic 034
	plus-emph-style = italic black 034
	line-numbers-zero-style = 235
	line-numbers-minus-style = 088
	line-numbers-plus-style = 034

[branch]
	autoSetupMerge = always
	autoSetupRebase = always

[branch "main"]
	rebase = true

[branch "master"]
	rebase = true

[pull]
	rebase = true

[push]
	default = simple
	followTags = true
	autoSetupRemote = true

[fetch]
	prune = true

[rebase]
	autosquash = true
	instructionFormat = [%cn <%ce> %G?] %s
	autoStash = true

; [blame]
; 	ignoreRevsFile = ".git-blame-ignore-revs"
; 	markIgnoredLines = true
; 	markUnblamableLines = true

[diff]
	# Detect copies as well as renames
	renames = copies
	algorithm = histogram
	tool = vimdiff
	indentHeuristic = true
	compactionHeuristic = true
	colorMoved = zebra

[difftool]
	prompt = false
	trustExitCode = true

[difftool "vimdiff"]
	cmd = $EDITOR -d $LOCAL $REMOTE

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = 1000
	tool = vimdiff
	conflictstyle = zdiff3

[mergetool]
	trustExitCode = true
	keepBackup = false
	prompt = false

[mergetool "vimdiff"]
	cmd = $EDITOR -d $LOCAL $BASE $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

[mergetool "fugitivediff"]
	cmd = $EDITOR -f -c "Gdiff" "$MERGED"

[log]
	decorate = short
	date = local

[status]
	submodulesummary = true
	color = true

[tag]
	forceSignAnnotated = true
	gpgsign = true

[apply]
	whitespace = nowarn

[color]
	ui = true

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = 238 italic
	frag = 240
	old = red strike
	new = green italic
	whitespace = red reverse
	commit = yellow bold

[color "status"]
	added = green
	changed = yellow
	untracked = red

[color "diff-highlight"]
	oldNormal = red strike
	oldHighlight = red strike 52
	newNormal = green italic
	newHighlight = green italic 22

[pager]
	show-branch = true
	status = true

[alias]
	amend = commit --amend --no-edit --date now
	force = push --force-with-lease
	fam = "!f() { git add . && git amend && git force; }; f"
	blm = blame -wMC
	br = branch -vv --sort=-committerdate --format='%(HEAD) %(color:red)%(objectname:short)%(color:reset) %(if:equals=*)%(HEAD)%(then)%(color:cyan)%(end)%(align:15,left)%(refname:short)%(end)%(color:reset)%(align:21,left)%(color:green)%(committerdate:auto:human)%(color:reset)%(end)%(contents:subject)'
	brs = br -a
	cb = checkout -b
	cm = commit -S
	co = checkout
	d = diff --patch-with-stat
	dc = d --staged
	dm = d --word-diff-regex=.
	doctor = remote -v show origin
	fl = l -u
	hide = update-index --assume-unchanged
	unhide = update-index --no-assume-unchanged
	unhide-all = update-index --really-refresh
	hidden = !git ls-files -v | grep \"^[a-z]\"
	l = log --color=always --graph --pretty=format:\"%C(blue)%h %Creset- %C(green)%>(12)(%cr) %Creset%s - %C(cyan)%aN %C(magenta)%d\" --date=auto:human
	lf = l --numstat
	lme = "!sh -c \"git l $@ --author=\"$NAME\"\""
	la = l --all --simplify-by-decoration
	lastchange = log -p --follow -n 1
	ll = log --cc
	ls = l --show-signature
	lnm = l --no-merges
	patch = !git --no-pager diff --no-color | pbcopy | echo "Patch copied to clipboard"
	rb = "!sh -c \"git rebase -i HEAD~$1\" -"
	st = status -sb
	stashes = stash list
	track = push origin -u HEAD
	undo = reset --soft HEAD^
	unstage = reset HEAD --
	who = shortlog -sne
	# similar to whatchanged, but gives a dir-level overview:
	# usage: git wd [diff-against=HEAD] [max-depth=4]
	wd = "!f() { git --paginate diff --dirstat=cumulative,files,0 ${1:-HEAD} | awk '{print $2}' | cut -d / -f1-${2:-4} | sort | uniq; }; f"
	unpushed-branches = log --branches --not --remotes --no-walk --decorate --oneline
	# Review helpers: https://blog.jez.io/cli-code-review/
	# https://github.com/jez/dotfiles/blob/d7b720fe13b6bc83829d248e23127b918d65de6e/util/gitconfig#L23-L53
	review-base = !git merge-base HEAD \"${review_base:-master}\"
	stat = !git --no-pager diff --stat $(git review-base)
	files = !git --no-pager diff --name-only $(git review-base)
	# Review by commit
	by-commit = !tig log --reverse $(git review-base)..HEAD
	# Show a markdown-formatted summary of commits from {review_base:-master} until HEAD
	pr-summary = !git log --reverse --format=\"- **%s** (%h)%n%n%w(74,2,2)%b\" \"${review_base:-master}\"..HEAD
	# split-diff style review using vim-fugitive Gdiff
	review = !$EDITOR -p $(git files) +\"tabdo Gdiff ${review_base:-master}\"
	reviewone = !$EDITOR -p +\"tabdo Gdiff ${review_base:-master}\"
	reviewf = !$EDITOR -p $(git files | fzf) +\"tabdo Gdiff ${review_base:-master}\"
	tag = tag -s
	default = !git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
	bclean = "!f() { DEFAULT=$(git default); git branch --merged ${1-$DEFAULT} | grep -v " ${1-$DEFAULT}$" | xargs git branch -d; }; f"
	# https://twitter.com/mitsuhiko/status/1554562541132603395
	# https://twitter.com/mitsuhiko/status/1554562650645864448
	mainalias = "!f() { if (git show-ref --verify -q refs/heads/main && !git show-ref --verify -q refs/heads/master); then (git symbolic-ref refs/heads/master refs/heads/main); else (git symbolic-ref refs/heads/main refs/heads/master); fi }; f"

[filter "media"]
	clean = git-media-clean %f
	smudge = git-media-smudge %f

# https://git-scm.com/docs/git-config#git-config-transferfsckObjects
[transfer]
	fsckObjects = true
[fetch]
	fsckObjects = true
[receive]
	fsckObjects = true

[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true

[protocol "keybase"]
	allow = always

[protocol]
	version = 2 # Added in Git 2.18.0.

[include]
	# Dynamic/Host specific config is stored here
	path = config-nix
