# vim:fileencoding=utf-8:ft=conf:foldmethod=marker
# https://sw.kovidgoyal.net/kitty/conf.html

# You can get a list of full family names available on your computer by running
# kitty list-fonts
# The default values shown below rely on your OS to choose an appropriate monospace font family.

font_family                  PragmataPro Mono Liga
italic_font                  PragmataPro Mono Liga Italic
bold_font                    PragmataPro Mono Liga Bold
bold_italic_font             PragmataPro Mono Liga Bold Italic
# https://github.com/fabrizioschiavi/pragmatapro/blob/master/useful_files/Changes%20log.txt
# font_features                PragmataProMonoLiga-Regular +ss13
font_size                    12.0
macos_thicken_font           1.1
tab_activity_symbol          â–²
cursor_stop_blinking_after   0
scrollback_lines             20000
scrollback_fill_enlarged_window yes
scrollback_pager             nvim  -c "set nonumber nolist showtabline=0 foldcolumn=0" -c "autocmd VimEnter * cnoremap q q!|nnoremap q :q!<CR>|normal G" -c "silent write /tmp/kitty_scrollback_buffer | te cat /tmp/kitty_scrollback_buffer - "
copy_on_select               no
select_by_word_characters    :@-./_~?&=%+#
mouse_hide_wait              0
window_alert_on_bell         no
enable_audio_bell            no
remember_window_size         yes
window_padding_width         10
tab_bar_edge                 top
close_on_child_death         no
allow_remote_control         yes
hide_window_decorations      yes
macos_titlebar_color         system
macos_option_as_alt          yes
macos_hide_from_tasks        no
macos_traditional_fullscreen yes
macos_custom_beam_cursor     yes
macos_colorspace             displayp3
strip_trailing_spaces        smart
update_check_interval        0
url_style                    curly
shell_integration            disabled
inactive_text_alpha          0.6
clipboard_control            write-clipboard write-primary no-append
confirm_os_window_close      0

include ./themes/color.conf

# Keyboard shortcuts {{{
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html
# super == cmd on mac
kitty_mod super

# These are not broken after 0.21.0
# https://github.com/kovidgoyal/kitty/issues/3718
mouse_map super+left press grabbed mouse_discard_event
mouse_map super+left release grabbed,ungrabbed mouse_click_url
mouse_map super+alt+left press ungrabbed mouse_selection rectangle


# You can have kitty remove all shortcut definition seen upto this point. Useful for
# instance, to remove the default shortcuts.
clear_all_shortcuts no

# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.
#
# You can combine multiple actions to be triggered by a single shortcut, using the
# syntax below:
# map key combine <separator> action1 <separator> action2 <separator> action3 ...
# For example:
# map kitty_mod+e combine : new_window : next_layout
# this will create a new window and switch to the next available layout
#
# You can use multi-key shortcuts using the syntax shown below:
# map key1>key2>key3 action
# For example:
# map ctrl+f>2 set_font_size 20
# this will change the font size to 20 points when you press ctrl+f and then 2

# Clipboard {{{
map kitty_mod+s        paste_from_selection
map shift+insert       paste_from_selection
map kitty_mod+o        pass_selection_to_program
# }}}

# Scrolling {{{
map kitty_mod+shift+h   show_scrollback
# }}}

# Window management {{{
map kitty_mod+n        new_os_window
map kitty_mod+w        close_window
map kitty_mod+l        next_window
map kitty_mod+h        previous_window
map kitty_mod+`        move_window_to_top
# map kitty_mod+ctrl+left          neighboring_window left
# map kitty_mod+shift+left         move_window right
# map kitty_mod+ctrl+down          neighboring_window down
# map kitty_mod+shift+down         move_window up
# }}}

# Tab management {{{
map kitty_mod+right    next_tab
map kitty_mod+left     previous_tab
map kitty_mod+t        new_tab
map kitty_mod+q        close_tab
map kitty_mod+l        next_layout
map kitty_mod+.        move_tab_forward
map kitty_mod+,        move_tab_backward
map kitty_mod+alt+t    set_tab_title
# }}}

# Select and act on visible text {{{
# Use the hints kitten to select text and either pass it to an external program or
# insert it into the terminal or copy it to the clipboard.
#
# Open a currently visible URL using the keyboard. The program used to open the
# URL is specified in open_url_with.
map kitty_mod+e         run_kitten text hints

# Select a path/filename and insert it into the terminal. Useful, for instance to
# run git commands on a filename output from a previous git command.
map kitty_mod+p>f       run_kitten text hints --type path --program -

# Select a path/filename and open it with the default open program.
map kitty_mod+p>shift+f run_kitten text hints --type path

# Select a line of text and insert it into the terminal. Use for the
# output of things like: ls -1
map kitty_mod+p>l       run_kitten text hints --type line --program -

# Select words and insert into terminal.
map kitty_mod+p>w       run_kitten text hints --type word --program -

# The hints kitten has many more modes of operation that you can map to different
# shortcuts. For a full description run: kitty +kitten hints --help
# }}}

# Miscellaneous {{{
map kitty_mod+u        input_unicode_character
map kitty_mod+escape   kitty_shell window

# Sending arbitrary text on shortcut key presses
# You can tell kitty to send arbitrary (UTF-8) encoded text to
# the client program when pressing specified shortcut keys. For example:
# map ctrl+alt+a send_text all Special text
# This will send "Special text" when you press the Ctrl+Alt+a key combination.
# The text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as UTF-8 text). The first argument
# to send_text is the keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated combination of them.
# The special keyword all means all modes. The modes normal and application refer to
# the DECCKM cursor key mode for terminals, and kitty refers to the special kitty
# extended keyboard protocol. Another example, that outputs a word and then moves the cursor
# to the start of the line (same as pressing the Home key):
# map ctrl+alt+a send_text normal Word\x1b[H
# map ctrl+alt+a send_text application Word\x1bOH
# }}}

# Send F6 for Ctrl-i in Vim (code via `kitty --debug-keyboard`).
map ctrl+i send_text application \x48

include kitty-local.conf
