set nocompatible

" https://github.com/justinmk/config/blob/master/.vimrc#L87-L94
let s:plugins=filereadable(expand("~/.vim/autoload/plug.vim", 1))

if !s:plugins

  fun! InstallPlug() "bootstrap plug.vim on new systems
    silent call mkdir(expand("~/.vim/autoload", 1), 'p')
    exe '!curl -fLo '.expand("~/.vim/autoload/plug.vim", 1).' https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  endfun

else

  " Vim-Plug https://github.com/junegunn/vim-plug
  "================================================================================
  call plug#begin('~/.vim/plugged')

  " General

  if has('lua')
    Plug 'Shougo/neocomplete.vim'
  end
  Plug 'SirVer/ultisnips'
  Plug 'Raimondi/delimitMate'
  Plug 'junegunn/fzf'                               , { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
  Plug 'mattn/emmet-vim'                            , { 'for': ['html', 'htmldjango'] }
  Plug 'ervandew/supertab'
  Plug 'rking/ag.vim'                               , { 'on': 'Ag' }
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-repeat'
  Plug 'godlygeek/tabular'
  Plug 'moll/vim-bbye'
  Plug 'mbbill/undotree'                            , { 'on': 'UndotreeToggle' }
  Plug 'majutsushi/tagbar'                          , { 'on': 'TagbarToggle' }
  Plug 'ConradIrwin/vim-bracketed-paste'
  Plug 'xolox/vim-misc' | Plug 'xolox/vim-easytags'
  Plug 'scrooloose/nerdtree'
  Plug 'jistr/vim-nerdtree-tabs'
  Plug 'szw/vim-g'
  Plug 'justinmk/vim-gtfo'
  Plug 'junegunn/vim-peekaboo'
  Plug 'epeli/slimux'                               , { 'on': [ 'SlimuxREPLSendBuffer', 'SlimuxREPLSendLine', 'SlimuxREPLSendSelection' ] }

  " Syntax
  Plug 'digitaltoad/vim-jade'                       , { 'for': ['jade'] }
  Plug 'marijnh/tern_for_vim'                       , { 'for': ['javascript'], 'do': 'npm i' }
  Plug 'othree/yajs.vim'                            , { 'for': ['javascript'] }
  Plug 'moll/vim-node'
  Plug 'mxw/vim-jsx'                                , { 'for': ['jsx'] }
  Plug 'othree/html5.vim'                           , { 'for': ['html'] }
  Plug 'Glench/Vim-Jinja2-Syntax'                   , { 'for': ['htmldjango', 'jinja'] }
  Plug 'tpope/vim-markdown'                         , { 'for': ['markdown'] }
  Plug 'wavded/vim-stylus'                          , { 'for': ['stylus'] }
  Plug 'ap/vim-css-color'
  Plug 'elzr/vim-json'                              , { 'for': ['json'] }
  Plug 'groenewege/vim-less'                        , { 'for': ['less'] }
  Plug 'kchmck/vim-coffee-script'                   , { 'for': ['coffee'] }

  " Linters & Code quality
  Plug 'editorconfig/editorconfig-vim'
  Plug 'scrooloose/syntastic'

  " Status bar
  Plug 'bling/vim-airline'

  " Colors
  Plug 'altercation/vim-colors-solarized'
  Plug 'chriskempson/base16-vim'
  Plug 'morhetz/gruvbox'

  " Git
  Plug 'airblade/vim-gitgutter'
  Plug 'mattn/webapi-vim' | Plug 'mattn/gist-vim'
  Plug 'tpope/vim-fugitive'
  Plug 'gregsexton/gitv'                            , { 'on': 'Gitv' }

  " Misc.
  Plug 'rizzatti/dash.vim'                          , { 'on': 'Dash' }
  Plug 'vim-scripts/utl.vim'

  " Distraction-free writing
  Plug 'junegunn/limelight.vim'
  Plug 'junegunn/goyo.vim'

  call plug#end()

  syntax enable
  filetype plugin indent on


  " Plugins settings
  "================================================================================

  set t_Co=256
  set background=dark
  let g:gruvbox_italic=0
  color gruvbox

  " JavaScript
  let g:javascript_enable_domhtmlcss = 1

  " Syntastic
  let g:syntastic_scss_checkers = ['scss_lint']
  let g:syntastic_mode_map = { "mode": "active",
        \ 'active_filetypes': [],
        \ 'passive_filetypes': ['html'] }
  au FileType javascript let b:syntastic_checkers = findfile('.jshintrc', '.;') != '' ? ['jshint'] : ['eslint']
  let g:syntastic_error_symbol = '✗'
  let g:syntastic_warning_symbol = '!'
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
  " Remove bg color from gutter signs
  highlight SyntasticErrorSign ctermbg=None
  highlight SyntasticWarningSign ctermbg=None
  highlight SyntasticStyleErrorSign ctermbg=None
  highlight SyntasticStyleWarningSign ctermbg=None

  " highlight error and warning lines
  highlight SyntasticErrorLine ctermbg=None ctermfg=009
  highlight SyntasticWarningLine ctermbg=None ctermfg=003
  highlight SyntasticStyleErrorLine ctermbg=None ctermfg=009
  highlight SyntasticStyleWarningLine ctermbg=None ctermfg=003

  " SuperTab
  let g:SuperTabDefaultCompletionType = "context"

  " Ag
  let g:agprg="ag --column"

  " Emmet
  let g:user_emmet_install_global = 0
  " let g:user_emmet_leader_key = '<Leader>'
  let user_emmet_expandabbr_key = '<C-e>'
  let g:user_emmet_next_key='<C-n>'
  let g:use_emmet_complete_tag = 1
  au FileType html,htmldjango EmmetInstall

  " Airline
  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif
  let g:airline_mode_map = {
        \ '__' : '-',
        \ 'n' : 'N',
        \ 'i' : 'I',
        \ 'R' : 'R',
        \ 'c' : 'C',
        \ 'v' : 'V',
        \ 'V' : 'V',
        \ '' : 'V',
        \ 's' : 'S',
        \ 'S' : 'S',
        \ '' : 'S',
        \ }
  let g:airline_powerline_fonts = 1
  let g:airline_detect_paste=1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline_left_sep=''
  let g:airline_right_sep=''
  let g:airline#extensions#tabline#left_alt_sep = '¦'
  let g:airline#extensions#tabline#right_alt_sep = '¦'
  let g:airline_detect_modified=1
  let g:airline_inactive_collapse=1
  let g:airline#extensions#syntastic#enabled = 1
  let g:airline#extensions#tagbar#enabled = 0
  let g:airline#extensions#tabline#buffer_nr_show = 1
  let g:airline#extensions#hunks#non_zero_only = 1
  let g:airline#extensions#hunks#enabled = 0

  " Tagbar
  let g:tagabar_show_linenumbers = -1
  let g:tagbar_singleclick = 1
  let g:tagbar_auto_open = 1

  " Github Auth
  let g:github_user = $GITHUB_USER
  " not working cause there is a problem with 2FA & Gist.vim
  "let g:github_token = $GITHUB_TOKEN
  let g:gist_detect_filetype = 1
  let g:gist_open_browser_after_post = 1

  " Neocomplete
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#auto_completion_start_length = 1
  let g:neocomplete#sources#buffer#cache_limit_size = 50000
  let g:neocomplete#data_directory = $HOME.'/.vim/cache/noecompl'
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  let g:neocomplete#force_omni_input_patterns.javascript = '[^. \t]\.\w*'
  " Tab completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

  aug omnicomplete
    au!
    au FileType css setl omnifunc=csscomplete#CompleteCSS
    au FileType markdown setl omnifunc=htmlcomplete#CompleteTags
    au FileType html,htmldjango setl omnifunc=emmet#completeTag
    au FileType javascript setl omnifunc=javascriptcomplete#CompleteJS
    au FileType python setl omnifunc=pythoncomplete#Complete
    au FileType xml setl omnifunc=xmlcomplete#CompleteTags
  aug END

  " Ultisnips
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<tab>"
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
  let g:UltiSnipsSnippetDirectories=["UltiSnips"]

  " File Explorer
  let g:netrw_liststyle = 3
  let g:netrw_winsize   = 15
  let g:netrw_banner = 0

  " Vim Commentary
  au FileType jade set commentstring=//-\ %s
  au FileType ruby set commentstring=#\ %s
  au FileType htmldjango set commentstring={#\ %s\ #}

  " JSON
  let g:vim_json_syntax_conceal = 0

  " Goyo
  let g:goyo_width=120

  " Limelight
  let g:limelight_conceal_ctermfg = 240

  " Markdown
  let g:markdown_fenced_languages = ['css', 'erb=eruby', 'javascript', 'js=javascript', 'json=json', 'ruby', 'sass', 'scss=sass', 'xml', 'html', 'python', 'stylus=css', 'less']

  " Easytags
  set tags=./.tags
  let g:easytags_events = ['BufReadPost', 'BufWritePost']
  let g:easytags_async = 1
  let g:easytags_dynamic_files = 2
  let g:easytags_resolve_links = 1
  " let g:easytags_suppress_ctags_warning = 1

  " gitgutter
  highlight clear SignColumn
  highlight GitGutterAdd ctermbg=None
  highlight GitGutterChange ctermbg=None
  highlight GitGutterDelete ctermbg=None
  highlight GitGutterChangeDelete ctermbg=None
  let g:gitgutter_sign_column_always = 1
  let g:gitgutter_eager = 0

  " NerdTree
  let g:NERDTreeShowHidden=1
  let NERDTreeIgnore = ['\.pyc$']

  " Undotree
  let g:undotree_WindowLayout= 2
  let g:undotree_SplitWidth= 50
  let g:undotree_SetFocusWhenToggle= 1

  " Peekaboo
  let g:peekaboo_window = 'vertical botright 60new'

  " Vim-g
  let g:vim_g_query_url = "http://google.com/search?q="
  let g:vim_g_command = "G"
  let g:vim_g_f_command = "Gf"

endif

" Settings
"================================================================================

" UI Configs
"-----------------
" number of visual spaces per TAB
set tabstop=2
" insert mode tab and backspace, number of spaces in tab when editing
set softtabstop=2
" expand tabs to spaces
set expandtab
" normal mode indentation commands use 2 spaces
set shiftwidth=2
set autoindent
set shiftround

set nowrap

" highlight ColorColumn ctermbg=235 guibg=#2c2d27
set colorcolumn=80,120

highlight OverLength ctermbg=000 ctermfg=white guibg=#592929
match OverLength /\%121v.\+/

" show line numbers
set relativenumber

" show command in bottom bar
set showcmd

" Display the mode you're in.
set showmode

" show a navigable menu for tab completion
set wildmenu
set wildmode=longest,list,full
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem,*.pyc
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
set wildignore+=*/tmp/librarian/*,*/.vagrant/*,*/.kitchen/*,*/vendor/cookbooks/*
set wildignore+=*/tmp/cache/assets/*/sprockets/*,*/tmp/cache/assets/*/sass/*
set wildignore+=*.swp,*~,._*
set wildignore+=*/.DS_Store,*/tmp/*


set complete+=kspell

" Display as much as possibe of a window's last line.
set display+=lastline

" highlight current line (Check auto groups too)
set cursorline

" redraw only when we need to.
set lazyredraw

" highlight matching [{()}]
set showmatch
set title
hi MatchParen cterm=none ctermbg=black ctermfg=yellow

" More natural splitting
set splitbelow
set splitright

" Search
"-----------------
" search as characters are entered
set incsearch

" highlight matches
set hlsearch

" Ignore case in search.
set ignorecase

" But case-sensitive if expression contains a capital letter.
set smartcase
"
" stolen from https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc
" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Movement
"-----------------
" highlight last inserted text
nnoremap gV `[v`]

" Other
" TODO: Cleanup.
"-----------------

" No beeping.
set visualbell

" assume the /g flag on :s substitutions to replace all matches in a line
set gdefault

set linebreak

" No flashing.
set noerrorbells
"
" http://robots.thoughtbot.com/faster-grepping-in-vim/
set grepprg=ag\ --nogroup\ --nocolor

" History
set history=200

" reload files when changed on disk, i.e. via `git checkout`
set autoread

" Fix broken backspace in some setups
set backspace=2

" Start scrolling slightly before the cursor reaches an edge
set scrolloff=3
set sidescrolloff=5

" Scroll sideways a character at a time, rather than a screen at a time
set sidescroll=1

" yank and paste with the system clipboard
set clipboard=unnamed

" Alwyas use UTF-8
set encoding=utf-8

" always show statusline
set laststatus=2

" show trailing whitespace
set list
set listchars=tab:▸\ ,trail:·,nbsp:_,eol:¬,precedes:«,extends:»,nbsp:░
" show where you are
set ruler

set smartindent

set noswapfile

set hidden

" Enable mouse support
set mouse=a
" Swap iTerm2 cursors in vim insert mode when using tmux, more here https://gist.github.com/andyfowler/1195581
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

set ttyfast

set formatoptions=qrn1

" No backups.
set nobackup
set nowritebackup
set noswapfile

" Make tilde command behave like an operator.
set tildeop

" Avoid unnecessary hit-enter prompts.
set shortmess+=atI

nmap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>

" Spell check
if has('nvim')
" `set spell` gives errors in Neovim https://github.com/neovim/neovim/issues/1551
  set nospell
else
  set spell
  hi clear SpellBad
  " hi SpellBad term=standout ctermfg=1 term=underline cterm=underline
endif

" Autocommands
"================================================================================
" Automatically make splits equal in size
au VimResized * wincmd =

augroup vimrcEx
  au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  au BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Some file types use real tabs
  au FileType {make,gitconfig} set noexpandtab

  " Make sure all markdown files have the correct filetype set and setup wrapping
  au BufWritePre * call Preserve("%s/\\s\\+$//e")
  au FileType markdown setl wrap textwidth=120 nolist statusline+=\ delimitMate_nesting_quotes=["`"] %{WordCount()}

  " #2 http://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message
  au Filetype gitcommit setl spell textwidth=72

  " fdoc is yaml
  au BufRead,BufNewFile *.fdoc set ft=yaml
  au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,Procfile,Guardfile,config.ru,*.rake} set ft=ruby
  " make Python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
  au BufEnter *.py silent! match OverLength /\%81v.\+/
  au FileType python setl softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79 commentstring=#\ %s
  au BufRead,BufNewFile,BufReadPre *.coffee set ft=coffee

  au BufRead,BufNewFile *.json set ft=json
  au BufNewFile,BufRead,BufWrite * if getline(1) =~ '^\#!.*node' | setf javascript | endif
  " Don't show column width marker in HTML & md
  au BufNewFile,BufRead *.{html,md} set colorcolumn=120

  au BufNewFile,BufRead *.html set ft=htmldjango
  au BufNewFile,BufRead .tags set ft=tags

  " Allow stylesheets to autocomplete hyphenated words
  au FileType css,scss,sass setl iskeyword+=-

  " Wrap quickfix window
  au FileType qf setlocal wrap linebreak
augroup END

" Activate goyo with Markdown files
function! s:auto_goyo()
  if &ft == 'markdown'
    Goyo 120
  elseif exists('#goyo')
    let bufnr = bufnr('%')
    Goyo!
    execute 'b '.bufnr
  endif
endfunction

augroup goyo_markdown
  au!
  au BufNewFile,BufRead * call s:auto_goyo()
augroup END

" Key mappings
"================================================================================

" leader is <space>
let mapleader = ' '
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Disable arrow keys (hardcore)
" map  <up>    <nop>
" imap <up>    <nop>
" map  <down>  <nop>
" imap <down>  <nop>
" map  <left>  <nop>
" imap <left>  <nop>
" map  <right> <nop>
" imap <right> <nop>

nnoremap <silent> <leader>sv :so $MYVIMRC<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
nnoremap <silent> <leader>ev :vs $MYVIMRC<CR>

nnoremap gb  :Gbrowse<CR> " Open current file on github.com
vnoremap gb  :Gbrowse<CR> " Make it work in Visual mode to open with highlighted linenumbers

inoremap jj <ESC>
" nnoremap jj <C-]>
" nnoremap kk <C-t>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>e :e
" nnoremap <Leader>v :vsplit
" nnoremap <Leader>s :split
nnoremap <silent> <Leader><Leader> :FZF -m<CR>
nnoremap <C-x> :SlimaxREPLSendLine<CR>
nnoremap <Leader>x :SlimaxREPLSendBuffer<CR>
vnoremap <Leader>x :SlimaxREPLSendSelection<CR>
nnoremap <Leader>n :call ToggleNumber()<CR>
nnoremap <Leader>t :TagbarToggle<CR>
" nnoremap <leader>d :Lex<CR>
nnoremap <leader>d :NERDTreeTabsToggle<CR>
nnoremap <leader>dd :Dash<CR>
nnoremap <Leader>bd :Bdelete<CR>
nnoremap <Leader><TAB> <C-w><C-w>
" set text wrapping toggles
nnoremap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>
nnoremap <leader>ss :mksession<CR>
nnoremap -- :UndotreeToggle<CR>
nnoremap == <C-w>t<C-w>K<CR>
nnoremap \|\| <C-w>t<C-w>H<CR>
nnoremap <leader>ll :Limelight!!<CR>
nnoremap <leader>fm :Goyo<CR>
" Tab and Shift + Tab Circular buffer navigation
nnoremap <tab>   :bnext<CR>
nnoremap <S-tab> :bprevious<CR>
" qq to record, Q to replay
nnoremap Q @q
" Make dot work in visual mode
vmap . :norm.<CR>

" Choose a color scheme with fzf
nnoremap <silent> <Leader>C :call fzf#run({
\   'source':
\     map(split(globpath(&rtp, "colors/*.vim"), "\n"),
\         "substitute(fnamemodify(v:val, ':t'), '\\..\\{-}$', '', '')"),
\   'sink':     'colo',
\   'options':  '+m',
\   'left':     20,
\   'launcher': 'xterm -geometry 20x30 -e bash -ic %s'
\ })<CR>


" List of buffers
function! BufList()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! BufOpen(e)
  execute 'buffer '. matchstr(a:e, '^[ 0-9]*')
endfunction

nnoremap <silent> <Leader><Enter> :call fzf#run({
\   'source':  reverse(BufList()),
\   'sink':    function('BufOpen'),
\   'options': '+m',
\   'down':    '40%'
\ })<CR>

" Open files in horizontal split
nnoremap <silent> <Leader>s :call fzf#run({
\   'down': '40%',
\   'sink': 'botright split' })<CR>

" Open files in vertical horizontal split
nnoremap <silent> <Leader>v :call fzf#run({
\   'right': winwidth('.') / 2,
\   'sink':  'vertical botright split' })<CR>

" Convenience commands and cabbrev's
"================================================================================
"
" Make these commonly mistyped commands still work
command! WQ wq
command! Wq wq
command! Wqa wqa
command! W w
command! Q q

" Use :C to clear hlsearch
command! C nohlsearch
command! Light set background=light

" Delete the current file and clear the buffer
command! Del :call delete(@%) | bdelete!

" Force write readonly files using sudo
command! WS w !sudo tee %

" open help in a new tab
cabbrev help tab help

" Functions
"================================================================================

function! ClearRegisters()
  let regs='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/-="*+'
  let i=0
  while (i<strlen(regs))
    exec 'let @'.regs[i].'=""'
    let i=i+1
  endwhile
endfunction

command! ClearRegisters call ClearRegisters()

" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above.
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
nnoremap _$ :call Preserve("%s/\\s\\+$//e")<CR>
nnoremap _= :call Preserve("normal gg=G")<CR>

" word count, taken from
" http://stackoverflow.com/questions/114431/fast-word-count-function-in-vim
function! WordCount()
  let s:old_status = v:statusmsg
  let position = getpos(".")
  exe ":silent normal g\<c-g>"
  let stat = v:statusmsg
  let s:word_count = 0
  if stat != '--No lines in buffer--'
    let s:word_count = str2nr(split(v:statusmsg)[11])
    let v:statusmsg = s:old_status
  end
  call setpos('.', position)
  return s:word_count
endfunction

function! s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=80
endfunction

" Load matchit.vim, but only if the user hasn't installed a newer version.
" https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim#L88
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

" Overrrides
" =================
if filereadable(expand("~/.vimrc.local"))
  so ~/.vimrc.local
endif

if filereadable('.local.vim')
  so .local.vim
endif
