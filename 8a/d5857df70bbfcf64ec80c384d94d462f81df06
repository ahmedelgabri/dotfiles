
"-----------------
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'mattn/gist-vim'
Plugin 'scrooloose/syntastic'
Plugin 'majutsushi/tagbar'
Plugin 'kchmck/vim-coffee-script'
Plugin 'reedes/vim-colors-pencil'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tpope/vim-surround'
Plugin 'chriskempson/vim-tomorrow-theme'
Plugin 'mattn/webapi-vim'
Plugin 'tpope/vim-fugitive'
Plugin 'digitaltoad/vim-jade'
Plugin 'wavded/vim-stylus'
Plugin 'marijnh/tern_for_vim'

Plugin 'rking/ag.vim'
let g:agprg="ag --column"

Plugin 'mattn/emmet-vim'
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
" expand items with tab
imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")
" go to next edit with ctrl+n
let g:user_emmet_next_key='<C-n>'

Plugin 'kien/ctrlp.vim'
let g:ctrlp_match_window = 'top,order:ttb'
let g:ctrlp_user_command = 'ag %s -l --hidden -g ""'
let g:ctrlp_use_caching = 0
let g:ctrlp_jump_to_buffer = 'Et'
let g:ctrlp_open_new_file = 't'
let g:ctrlp_open_multiple_files = 't'
let g:ctrlp_follow_symlinks = 2

Plugin 'bling/vim-airline'
let g:airline_theme = 'tomorrow'
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline_detect_modified=1
let g:airline_inactive_collapse=1
let g:airline_right_alt_sep = '⮃'
let g:airline_right_sep = '⮂'
let g:airline_left_alt_sep= '⮁'
let g:airline_left_sep = '⮀'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'
let g:airline_symbols.whitespace = 'Ξ'

Plugin 'Valloric/YouCompleteMe'
let g:ycm_autoclose_preview_window_after_completion = 0

call vundle#end()
filetype plugin indent on
syntax enable

" let g:solarized_visibility="low"
" set background=dark
color Tomorrow-Night


" UI Configs
"-----------------
set tabstop=4                                                " number of visual spaces per TAB
set softtabstop=4                                            " insert mode tab and backspace, number of spaces in tab when editing
set expandtab                                                " expand tabs to spaces
set number                                                   " show line numbers
set showcmd                                                  " show command in bottom bar
set shiftwidth=2                                             " normal mode indentation commands use 2 spaces

set wildmenu                                                 " show a navigable menu for tab completion
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmode=longest,list,full

set cursorline                                               " highlight current line (Check auto groups too)
:highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE

set lazyredraw                                               " redraw only when we need to.
set showmatch                                                " highlight matching [{()}]

" Search
"-----------------
set incsearch                                                " search as characters are entered
set hlsearch                                                 " highlight matches
set ignorecase                                               " Ignore case in search
" Highlight search results by default
" nnoremap <F3> :set invhlsearch hlsearch?<CR>
" turn off search highlight
" nnoremap <leader><space> :nohlsearch<CR>

" Folding
"-----------------
set foldenable                                               " enable folding
set foldlevelstart=10                                        " open most folds by default
set foldnestmax=10                                           " 10 nested fold max
nnoremap <space> za                                          " space open/closes folds
set foldmethod=indent                                        " fold based on indent level Other acceptable values are marker, manual, expr, syntax, diff.
                                                             " Run :help foldmethod



" Movement
"-----------------
" highlight last inserted text
nnoremap gV `[v`]

" Other
" TODO: Cleanup.
"-----------------
set autoindent
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set backspace=2                                              " Fix broken backspace in some setups
"set backupcopy=yes                                           " see :help crontab
" Start scrolling slightly before the cursor reaches an edge
set scrolloff=3
set sidescrolloff=5
" Scroll sideways a character at a time, rather than a screen at a time
set sidescroll=1
set clipboard=unnamed                                        " yank and paste with the system clipboard
set directory-=.                                             " don't store swapfiles in the current directory
set encoding=utf-8
set laststatus=2                                             " always show statusline
set list                                                     " show trailing whitespace
set listchars=tab:.\ ,trail:·,nbsp:_
set ruler                                                    " show where you are
set scrolloff=2                                              " show context above/below cursorline
set smartcase                                                " case-sensitive search if any caps
set smartindent
set noswapfile
set showmode
set hidden
set vb                                                       " Visual bell
set mouse=a                                                  " Enable mouse support
set ttyfast
set relativenumber
set wrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=85
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
:set spell                                                 " Spell check

hi clear SpellBad
hi SpellBad cterm=underline



let mapleader = ','                                        " leader is comma
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
map <silent> <leader>sv :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
inoremap jj <ESC>

" save session
nnoremap <leader>s :mksession<CR>

" Make dot work in visual mode
vnoremap . :norm.<CR>

augroup configgroup
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    autocmd BufWritePre *.php,*.py,*.js,*.txt,*.css,*.scss,*.sass,*.html,*.hs,*.java,*.md :call <SID>StripTrailingWhitespaces()
    " #2 http://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message
    autocmd Filetype gitcommit setlocal spell textwidth=72
    " fdoc is yaml
    autocmd BufRead,BufNewFile *.fdoc set filetype=yaml
    " md is markdown
    autocmd BufRead,BufNewFile *.md set filetype=markdown
    autocmd FileType php setlocal expandtab
    autocmd FileType php setlocal list
    autocmd FileType php setlocal listchars=tab:+\ ,eol:-
    autocmd FileType php setlocal formatprg=par\ -w80\ -T4
    autocmd FileType ruby setlocal tabstop=2
    autocmd FileType ruby setlocal shiftwidth=2
    autocmd FileType ruby setlocal softtabstop=2
    autocmd FileType ruby setlocal commentstring=#\ %s
    autocmd FileType coffee setlocal tabstop=2
    autocmd FileType coffee setlocal shiftwidth=2
    autocmd FileType coffee setlocal softtabstop=2
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
augroup END



set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup


"
"" Setting font & status bar
set guifont=Meslo\ LG\ S\ DZ:h14

" Conditionals upon if a gui is running
if has('gui_running')
  let titlestring=system('pwd | sed "s/.*\///"')
  execute "set titlestring=".titlestring

  " Always show the tab bar in macvim
  set showtabline=2
else
  set mouse=a
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif



function! ClearRegisters()
    let regs='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/-="*+'
    let i=0
    while (i<strlen(regs))
        exec 'let @'.regs[i].'=""'
        let i=i+1
    endwhile
endfunction

command! ClearRegisters call ClearRegisters()

" toggle between number and relativenumber
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc

" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above.
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction
