" vim: ft=vim

" Vim-Plug
"================================================================================

" Automatic installation
" https://github.com/junegunn/vim-plug/wiki/faq#automatic-installation

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" General
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'carlitux/deoplete-ternjs', { 'do': 'npm i -g tern' }
Plug 'ternjs/tern_for_vim'                        , { 'for': ['javascript'], 'do': 'npm i' }
Plug 'SirVer/ultisnips'
Plug 'Raimondi/delimitMate'
Plug 'junegunn/fzf'                               , { 'dir': '~/.fzf', 'do': 'yes \| ./install --all' } | Plug 'junegunn/fzf.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'mattn/emmet-vim'                            , { 'for': ['html', 'htmldjango', 'jinja', 'jinja2', 'twig'] }
Plug 'ddrscott/vim-side-search'
Plug 'unblevable/quick-scope'
" Plug 'rking/ag.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'wincent/terminus'
Plug 'junegunn/vim-easy-align'                    , { 'on': ['<Plug>(EasyAlign)'] }
Plug 'moll/vim-bbye'
Plug 'mbbill/undotree'                            , { 'on': ['UndotreeToggle'] }
Plug 'duggiefresh/vim-easydir'
" Plug 'xolox/vim-misc' | Plug 'Wraul/vim-easytags' , { 'branch': 'fix-universal-detection' }
" Plug 'xolox/vim-misc' | Plug 'xolox/vim-easytags'
Plug 'ludovicchabant/vim-gutentags'
Plug 'junegunn/vim-peekaboo'
Plug 'tpope/vim-obsession'
Plug 'kshenoy/vim-signature'
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'MarcWeber/vim-addon-local-vimrc'
Plug 'wincent/loupe'
Plug 'jaawerth/nrun.vim'

" Syntax
Plug 'kewah/vim-stylefmt'                         , { 'on':  ['Stylefmt', 'StylefmtVisual'] }
Plug 'sheerun/vim-polyglot'
Plug 'moll/vim-node'                              , { 'for': ['javascript'] }
" Plug 'flowtype/vim-flow'                          , { 'for': ['javascript'], 'do': 'npm i -g flow-bin' }
Plug 'ap/vim-css-color'                           , { 'for': ['css', 'sass', 'scss', 'less', 'stylus', 'html', 'htmldjango', 'jinja', 'jinja2', 'twig'] }
Plug 'stephenway/postcss.vim'                     , { 'for': ['css'] }

" Linters & Code quality
Plug 'editorconfig/editorconfig-vim'
Plug 'benekastah/neomake'                         , { 'do': 'npm i -g flow-vim-quickfix' }

" Themes, UI & eye cnady
Plug 'jbleuzen/vim-buftabline'
Plug 'itchyny/lightline.vim'
Plug 'shirataki/lightline-onedark'
Plug 'morhetz/gruvbox'
Plug 'joshdick/onedark.vim'
Plug 'tyrannicaltoucan/vim-deep-space'
Plug 'romainl/flattened' " Solarized, without the bullshit.
Plug 'w0ng/vim-hybrid'
Plug 'chriskempson/base16-vim'

" Git
Plug 'airblade/vim-gitgutter'
Plug 'mattn/webapi-vim' | Plug 'mattn/gist-vim'
Plug 'lambdalisue/vim-gista'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim', { 'on': 'GV' }

call plug#end()

syntax enable
filetype plugin indent on
"
" Load matchit.vim, but only if the user hasn't installed a newer version.
" https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim#L88
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

" " http://ddrscott.github.io/blog/2016/vim-toggle-movement/
" function! ToggleMovement(firstOp, thenOp)
"   let pos = getpos('.')
"   execute "normal! " . a:firstOp
"   if pos == getpos('.')
"     execute "normal! " . a:thenOp
"   endif
" endfunction

" " The original carat 0 swap
" nnoremap <silent> 0 :call ToggleMovement('^', '0')<CR>

" " How about ; and ,
" nnoremap <silent> ; :call ToggleMovement(';', ',')<CR>
" nnoremap <silent> , :call ToggleMovement(',', ';')<CR>

" " How about H and L
" nnoremap <silent> H :call ToggleMovement('H', 'L')<CR>
" nnoremap <silent> L :call ToggleMovement('L', 'H')<CR>

" " How about G and gg
" nnoremap <silent> G :call ToggleMovement('G', 'gg')<CR>
" nnoremap <silent> gg :call ToggleMovement('gg', 'G')<CR>

" Plugins settings
"================================================================================

" YouCompleteMe
" let g:ycm_path_to_python_interpreter = '/usr/local/bin/python'
" let g:ycm_python_binary_path = '/usr/local/bin/python3'
" autocmd! User YouCompleteMe if !has('vim_starting')
"       \| call youcompleteme#Enable() | endif

" Tab completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" Github Auth for Gists
let g:gista#client#default_username = $GITHUB_USER
let g:gista#command#post#allow_empty_description = 1
let g:gista#command#post#interactive_description = 0

function! s:on_GistaPost() abort
  let gistid = g:gista#avars.gistid
  execute printf('Gista browse --gistid=%s', gistid)
endfunction
augroup my_vim_gista_autocmd
  autocmd! *
  autocmd User GistaPost call s:on_GistaPost()
augroup END

let g:github_user = $GITHUB_USER
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:gist_show_privates = 1
let g:gist_get_multiplefile = 1

" Overrrides
" =================
if filereadable(expand("~/.vimrc.local"))
  so ~/.vimrc.local
endif
